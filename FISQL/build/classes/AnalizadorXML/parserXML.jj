options {
  IGNORE_CASE = true;
}
PARSER_BEGIN(parserXML)
package AnalizadorXML;
import fisql.*;
import USQL.Nodo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class parserXML
{

    static parserXML parser = null;

    public static Nodo compilar(String cadena) throws ParseException {
        Nodo nodo = null;
        try {
            InputStream stream = new ByteArrayInputStream(cadena.getBytes(StandardCharsets.UTF_8));
            if (parser == null) {
                parser = new parserXML(stream);
            } else {
                ReInit(stream);
            }
            nodo = parser.INICIO();
        } catch (ParseException e) {
            System.out.println(e.getMessage());
        }
        return nodo;
    }
}

PARSER_END(parserXML)

TOKEN:
{
		<etqA: "<">
	|	<etqB: "</">
	|	<etqC: ">">
}
TOKEN:
{
		<entero: (["0"-"9"])+ >
	|	<decimal: (["0"-"9"])+"."(["0"-"9"])+ >
	|	<id: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
	|	<cadena: "\"" (~["\""])* "\"">
	|	<cad: "\"" (~["\""])* "\"">
	|	<idVar: ["@"]["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
	|	<simbolo: "#"|"@"|"!"|":"|";"|"?"|"$"|"%"|"^"|"&"|"*"|"!"|"("|")"|"-"|"_"|"="|"<"|">"|"/"|"¿"|"¡"|"."|"["|"]">
	|	<cadenaDos: ("\"")(<entero>|<id>|<simbolo>|" "|"\t"|"\n")*("\"")>
	|	<fecha: (["0"-"9"]["0"-"9"]"-"["0"-"9"]["0"-"9"]"-"["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"])>
	|	<hora: (["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"])>
	
}
SKIP:
{
	" "| "\r\n" | "\t" | "\n" | "\r" | "\f"
	|"\u00a0" 
}


Nodo INICIO():
{Nodo nuevo = new Nodo("INICIO"); Nodo s;}
{
try{
	s = ETIQUETA()<EOF>{nuevo.insertar(s); return nuevo;}
}catch(ParseException e){
	Token t;
    t = getNextToken();
	if(t.kind==etqC){
		return nuevo; 
	}
	INICIO();
	{return nuevo;}
}
}

Nodo ETIQUETA():
{Nodo nuevo = new Nodo("ETIQUETA"); Nodo s,n;}
{
try{
	s =ETQ() n=ETIQUETAP(){nuevo.insertar(s); nuevo.insertar(n); return nuevo;}
	
}catch(ParseException e){
	Token t;
    t = getNextToken();
	if(t.kind==etqC){
		return nuevo; 
	}
	ETIQUETA();
	{return nuevo;}
}
}

Nodo ETIQUETAP():
{Nodo nuevo = new Nodo("ETIQUETAP"); Nodo s,n;}
{
try{
	s =ETQ() n=ETIQUETAP(){nuevo.insertar(s); nuevo.insertar(n); return nuevo;}
	|	{return null;}
}catch(ParseException e){
	Token t;
    t = getNextToken();
	if(t.kind==etqC){
		return nuevo; 
	}
	ETIQUETAP();
	{return nuevo;}
}
}

Nodo ETQ():
{Nodo nuevo = new Nodo("ETQ"); Nodo s; Token i,j;}
{
try{
	<etqA> i=<id><etqC> s=OPCION()<etqB> j=<id><etqC>{nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);  nuevo.insertar(new Nodo(j.image)); return nuevo;}
}catch(ParseException e){
	Token t;
    t = getNextToken();
	if(t.kind==etqC){
		return nuevo; 
	}
	ETQ();
	{return nuevo;}
}
}
Nodo OPCION():
{Nodo nuevo = new Nodo("OPCION"); Nodo s;}
{
try{
		s =	ETIQUETA(){nuevo.insertar(s); return nuevo;}
	|	s = CONTENIDO(){nuevo.insertar(s); return nuevo;}
}catch(ParseException e){
	Token t;
    t = getNextToken();
	if(t.kind==etqC){
		return nuevo; 
	}
	OPCION();
	{return nuevo;}
}
}
Nodo CONTENIDO():
{Nodo nuevo = new Nodo("CONTENIDO"); Nodo s; Token i;}
{
try{
		i = <entero>{nuevo.insertar(new Nodo(i.image,"entero")); return nuevo;}
	|   i = <decimal>{nuevo.insertar(new Nodo(i.image,"decimal")); return nuevo;}
	|	i =	<cadena>{nuevo.insertar(new Nodo(i.image,"cadena")); return nuevo;}
	|   i = <id>s =C(){nuevo.insertar(new Nodo(i.image,"id")); nuevo.insertar(s); return nuevo;}
	|   i = <idVar>{nuevo.insertar(new Nodo(i.image,"idVar")); return nuevo;}
	|   i = <cadenaDos>{nuevo.insertar(new Nodo(i.image,"idVar")); return nuevo;}
	|   i = <hora>{nuevo.insertar(new Nodo(i.image,"idVar")); return nuevo;}
	|   i = <fecha>{nuevo.insertar(new Nodo(i.image,"idVar")); return nuevo;}
}catch(ParseException e){
	Token t;
    t = getNextToken();
	if(t.kind==etqC){
		return nuevo; 
	}
	CONTENIDO();
	{return nuevo;}
}
}
Nodo C():
{Nodo nuevo = new Nodo("C"); Nodo s; Token i;}
{
try{
	    i = <id>{nuevo.insertar(new Nodo(i.image,"id")); return nuevo;}
	|	{return null;}
}catch(ParseException e){
	Token t;
    t = getNextToken();
	if(t.kind==etqC){
		return nuevo; 
	}
	C();
	{return nuevo;}
}
}
