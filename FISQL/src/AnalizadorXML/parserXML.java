/* Generated By:JavaCC: Do not edit this line. parserXML.java */
package AnalizadorXML;
import fisql.*;
import USQL.Nodo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class parserXML implements parserXMLConstants {
//se comenta esto
        public static Nodo compilar(String cadena) throws ParseException {
            Nodo nodo = null;
            try {
                InputStream stream = new ByteArrayInputStream(cadena.getBytes(StandardCharsets.UTF_8));

                parserXML analizador = new parserXML(stream);
                nodo =analizador.INICIO();
                System.out.println("Se ha compilado con exito");

            } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("Se han encontrado errores");
            }
            return nodo;
        }

  static final public Nodo INICIO() throws ParseException {
 Nodo nuevo = new Nodo("INICIO"); Nodo s;
    try {
      s = ETIQUETA();
      jj_consume_token(0);
                            nuevo.insertar(s); {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==etqC){
                {if (true) return nuevo;}
        }
        INICIO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ETIQUETA() throws ParseException {
 Nodo nuevo = new Nodo("ETIQUETA"); Nodo s,n;
    try {
      s = ETQ();
      n = ETIQUETAP();
                               nuevo.insertar(s); nuevo.insertar(n); {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==etqC){
                {if (true) return nuevo;}
        }
        ETIQUETA();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ETIQUETAP() throws ParseException {
 Nodo nuevo = new Nodo("ETIQUETAP"); Nodo s,n;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case etqA:
        s = ETQ();
        n = ETIQUETAP();
                               nuevo.insertar(s); nuevo.insertar(n); {if (true) return nuevo;}
        break;
      default:
        jj_la1[0] = jj_gen;
                 {if (true) return null;}
      }
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==etqC){
                {if (true) return nuevo;}
        }
        ETIQUETAP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ETQ() throws ParseException {
 Nodo nuevo = new Nodo("ETQ"); Nodo s; Token i,j;
    try {
      jj_consume_token(etqA);
      i = jj_consume_token(id);
      jj_consume_token(etqC);
      s = OPCION();
      jj_consume_token(etqB);
      j = jj_consume_token(id);
      jj_consume_token(etqC);
                                                          nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);  nuevo.insertar(new Nodo(j.image)); {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==etqC){
                {if (true) return nuevo;}
        }
        ETQ();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo OPCION() throws ParseException {
 Nodo nuevo = new Nodo("OPCION"); Nodo s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case etqA:
        s = ETIQUETA();
                                   nuevo.insertar(s); {if (true) return nuevo;}
        break;
      case id:
      case cadena:
        s = CONTENIDO();
                                nuevo.insertar(s); {if (true) return nuevo;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==etqC){
                {if (true) return nuevo;}
        }
        OPCION();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo CONTENIDO() throws ParseException {
 Nodo nuevo = new Nodo("CONTENIDO"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cadena:
        i = jj_consume_token(cadena);
                                 nuevo.insertar(new Nodo(i.image,"cadena")); {if (true) return nuevo;}
        break;
      case id:
        i = jj_consume_token(id);
                     nuevo.insertar(new Nodo(i.image,"id")); {if (true) return nuevo;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==etqC){
                {if (true) return nuevo;}
        }
        CONTENIDO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public parserXMLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0xc2,0xc0,};
   }

  /** Constructor with InputStream. */
  public parserXML(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parserXML(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parserXMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parserXML(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parserXMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parserXML(parserXMLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parserXMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
