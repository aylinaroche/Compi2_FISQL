/* Generated By:JavaCC: Do not edit this line. parserSQLTokenManager.java */

/** Token Manager. */
public class parserSQLTokenManager implements parserSQLConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffffffffffeL) != 0L)
         {
            jjmatchedKind = 68;
            return 2;
         }
         return -1;
      case 1:
         if ((active0 & 0xc0000000L) != 0L)
            return 2;
         if ((active0 & 0x1fff3ffffffeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 1;
            }
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x1fffbffffffeL) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0xa80101c80L) != 0L)
            return 2;
         if ((active0 & 0x1ff53fefe37eL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 3;
            }
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000006004L) != 0L)
            return 2;
         if ((active0 & 0x1f753fef937aL) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x30002008200L) != 0L)
            return 2;
         if ((active0 & 0x1c753def117aL) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x24182e012aL) != 0L)
            return 2;
         if ((active0 & 0x1c5125c11050L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
            return 2;
         }
         return -1;
      case 7:
         if ((active0 & 0xc5020c01010L) != 0L)
            return 2;
         if ((active0 & 0x100105010040L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 7;
            return 2;
         }
         return -1;
      case 8:
         if ((active0 & 0x105010040L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
            return 2;
         }
         if ((active0 & 0x100000000000L) != 0L)
            return 2;
         return -1;
      case 9:
         if ((active0 & 0x105000000L) != 0L)
            return 2;
         if ((active0 & 0x10040L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 9;
            }
            return 2;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 10;
            return 2;
         }
         if ((active0 & 0x4000040L) != 0L)
            return 2;
         return -1;
      case 11:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 11;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 33:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 42:
         return jjStopAtPos(0, 55);
      case 43:
         return jjStopAtPos(0, 53);
      case 45:
         return jjStopAtPos(0, 54);
      case 47:
         return jjStopAtPos(0, 56);
      case 58:
         return jjStopAtPos(0, 52);
      case 59:
         return jjStopAtPos(0, 51);
      case 60:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 49);
      case 93:
         return jjStopAtPos(0, 50);
      case 94:
         return jjStopAtPos(0, 57);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20002000400L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x90200002008L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2430001a00L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000020000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000800140L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8008000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800010030L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000040000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c4000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4080L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000180000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 123:
         return jjStopAtPos(0, 47);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 125:
         return jjStopAtPos(0, 48);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 38:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20a00005832L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10a534040080L, active1, 0L);
      case 105:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800140L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000200060cL, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000180000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 124:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x28020000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000002000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x104000002L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000008L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10090020000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010400L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000020L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x802000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200800050L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2001241900L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x82008L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2514a09100L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x6L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x40020004000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 2);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x400a000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000040L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000020L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 2);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x110023000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x504000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000002L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10020L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000100L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000420000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000200L);
      case 110:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000008L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0xac0040L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000008000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x18200002L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x104000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10008L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x82000000100L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x81000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x440000L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x20010L);
      case 112:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 2);
         break;
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 2);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x400800020L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000040L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1020c00000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4105010000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000001000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 2);
         break;
      case 111:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 2);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 2);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 2);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 2);
         break;
      case 114:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 1, 2);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 2);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 2);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 2);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 2);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 2);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000010L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 4, 2);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 2);
         break;
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 2);
         return jjMoveStringLiteralDfa8_0(active0, 0x104000000L);
      case 112:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 2);
         break;
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 2);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 2);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 2);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 2);
         break;
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 2);
         break;
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10040L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x104000000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 6, 2);
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 26, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\166\141\154\151\144\141\162", "\154\157\147\151\156", 
"\143\157\155\141\156\144\157", "\160\141\163\163\167\157\162\144", "\160\141\161\165\145\164\145", 
"\151\156\163\164\162\165\143\143\151\157\156", "\164\145\170\164", "\151\156\164\145\147\145\162", 
"\144\157\165\142\154\145", "\142\157\157\154", "\144\141\164\145", "\144\141\164\145\124\151\155\145", 
"\143\162\145\141\162", "\164\141\142\154\141", "\157\142\152\145\164\157", 
"\160\162\157\143\145\144\151\155\151\145\156\164\157", "\146\165\156\143\151\157\156", "\162\145\164\157\162\156\157", 
"\165\163\165\141\162\151\157", "\165\163\141\162", "\141\154\164\145\162\141\162", 
"\145\154\151\155\151\156\141\162", "\151\156\163\145\162\164\141\162", 
"\141\143\164\165\141\154\151\172\141\162", "\142\157\162\162\141\162", "\163\145\154\145\143\143\151\157\156\141\162", 
"\157\164\157\162\147\141\162", "\144\145\156\145\147\141\162", "\144\145\143\154\141\162\141\162", 
"\163\151", "\163\151\156\157", "\163\145\154\145\143\143\151\157\156\141", 
"\143\141\163\157", "\144\145\146\145\143\164\157", "\160\141\162\141", 
"\155\151\145\156\164\162\141\163", "\144\145\164\145\156\145\162", "\151\155\160\162\151\155\151\162", 
"\146\145\143\150\141", "\143\157\156\164\141\162", "\142\141\143\153\165\160", 
"\165\163\161\154\144\165\155\160", "\143\157\155\160\154\145\164\157", "\162\145\163\164\141\165\162\141\162", 
"\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", "\53", "\55", "\52", 
"\57", "\136", "\75\75", "\41\75", "\76", "\74", "\76\75", "\74\75", "\174\174", 
"\46\46", "\41", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x1fL, 
};
static final long[] jjtoSkip = {
   0x0L, 0xe0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[3];
static private final int[] jjstateSet = new int[6];
static protected char curChar;
/** Constructor. */
public parserSQLTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public parserSQLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
