/* Generated By:JavaCC: Do not edit this line. parserSQLTokenManager.java */

/** Token Manager. */
public class parserSQLTokenManager implements parserSQLConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffffffeL) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 90;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x41004049e0000000L) != 0L || (active1 & 0x1L) != 0L)
            return 7;
         if ((active0 & 0xbeffbfb61ffffffeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 1;
            }
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 0xa000000000000000L) != 0L)
            return 7;
         if ((active0 & 0x5effbfff7ffffffeL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
            return 7;
         }
         return -1;
      case 3:
         if ((active0 & 0x4020201500201c80L) != 0L)
            return 7;
         if ((active0 & 0x1edf9fea7fdfe37eL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 3;
            }
            return 7;
         }
         return -1;
      case 4:
         if ((active0 & 0x48001000000a004L) != 0L)
            return 7;
         if ((active0 & 0x1a5f9eea7fdf537aL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 7;
         }
         return -1;
      case 5:
         if ((active0 & 0x8060004010200L) != 0L)
            return 7;
         if ((active0 & 0x1a5798ea7bde517aL) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 7;
         }
         return -1;
      case 6:
         if ((active0 & 0xa140048305c012aL) != 0L)
            return 7;
         if ((active0 & 0x104398a24b825050L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 7;
         }
         return -1;
      case 7:
         if ((active0 & 0x100018a041801010L) != 0L)
            return 7;
         if ((active0 & 0x4380020a024040L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
            return 7;
         }
         return -1;
      case 8:
         if ((active0 & 0x40000000000000L) != 0L)
            return 7;
         if ((active0 & 0x380020a024040L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
            return 7;
         }
         return -1;
      case 9:
         if ((active0 & 0x20a004000L) != 0L)
            return 7;
         if ((active0 & 0x3800000020040L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 9;
            }
            return 7;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000040L) != 0L)
            return 7;
         if ((active0 & 0x3800000020000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 10;
            return 7;
         }
         return -1;
      case 11:
         if ((active0 & 0x3800000020000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 11;
            return 7;
         }
         return -1;
      case 12:
         if ((active0 & 0x1800000000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 12;
            return 7;
         }
         if ((active0 & 0x2000000020000L) != 0L)
            return 7;
         return -1;
      case 13:
         if ((active0 & 0x1000000000000L) != 0L)
            return 7;
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 13;
            return 7;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 14;
            return 7;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 15;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 33:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 40:
         return jjStopAtPos(0, 65);
      case 41:
         return jjStopAtPos(0, 66);
      case 42:
         return jjStopAtPos(0, 75);
      case 43:
         return jjStopAtPos(0, 73);
      case 44:
         return jjStopAtPos(0, 87);
      case 45:
         return jjStopAtPos(0, 74);
      case 47:
         return jjStopAtPos(0, 76);
      case 58:
         return jjStopAtPos(0, 72);
      case 59:
         return jjStopAtPos(0, 71);
      case 60:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 61:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 62:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 91:
         return jjStopAtPos(0, 69);
      case 93:
         return jjStopAtPos(0, 70);
      case 94:
         return jjStopAtPos(0, 77);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2004800002400000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40004004400L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10120400002008L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4400004860001a00L, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100000000800000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80010000040000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8001000140L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3000000000004L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000010010000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x9000001000020030L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x388000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8080L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20080000300000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x240000000000002L, 0x0L);
      case 123:
         return jjStopAtPos(0, 67);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 125:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 38:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 61:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x29004140000d832L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x5040014a68080080L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2100000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000c00000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000140L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x840012000400060cL, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000022000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020080000300000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8a00000040000L, active1, 0L);
      case 124:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000200000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x50040000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20002000002000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000800000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x280200208000002L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10100000000008L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400020120040000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000020L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x1044001004000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000401004050L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x804002481900L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x102008L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000200L);
      case 67:
      case 99:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x440000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x804004a29415100L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x6L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x80040008000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 79:
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 7);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 7);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x200800000080000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 7);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x8014000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000010L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000000040L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000020L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 65:
      case 97:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 7);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x48020046000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xa08000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000002L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000020020L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000030000100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1010808000840000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000200L);
      case 78:
      case 110:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x800004000000008L);
      case 79:
      case 111:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 7);
         break;
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000001580040L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000011000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x814000030400002L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x208000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000024008L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x200104000000100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x101000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000880000L);
      case 79:
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x40010L);
      case 80:
      case 112:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 7);
         break;
      case 82:
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 7);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 7);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x2040000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x801000020L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000040L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2041804000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000040L);
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x820a020000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000001000L);
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 7);
         break;
      case 79:
      case 111:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 7);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 7);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 7);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 1, 7);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 7);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 7);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 7);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 7);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 7);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 7);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 7);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 7);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 68:
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 4, 7);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 7);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 79:
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000208000000L);
      case 80:
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 7);
         break;
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 7);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 7);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 7);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x41800000000000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 7);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 7);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000020040L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x208000000L);
      case 79:
      case 111:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 7);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x2000008000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x1800000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 7);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
      case 78:
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 6, 7);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000020000L);
      case 82:
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 49, 7);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L);
      case 79:
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 17, 7);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 48, 7);
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 47, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(0);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(6);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(5);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(6);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(5);
                  }
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\72", "\53", "\55", "\52", "\57", "\136", "\75\75", 
"\41\75", "\76", "\74", "\76\75", "\74\75", "\174\174", "\46\46", "\41", "\54", "\75", 
null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x1e0000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[7];
static private final int[] jjstateSet = new int[14];
static protected char curChar;
/** Constructor. */
public parserSQLTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public parserSQLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 7; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
