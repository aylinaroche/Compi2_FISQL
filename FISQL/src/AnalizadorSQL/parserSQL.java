/* Generated By:JavaCC: Do not edit this line. parserSQL.java */
package AnalizadorSQL;
import fisql.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class parserSQL implements parserSQLConstants {
//se comenta esto
        public static Nodo compilar(String cadena) throws ParseException {
            Nodo nodo = null;
            try {
                InputStream stream = new ByteArrayInputStream(cadena.getBytes(StandardCharsets.UTF_8));

                parserSQL analizador = new parserSQL(stream);
                nodo = analizador.INICIO();
                System.out.println("Se ha compilado con exito");

            } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("Se han encontrado errores");
            }
            return nodo;
        }

  static final public Nodo INICIO() throws ParseException {
 Nodo nuevo = new Nodo("INICIO"); Nodo s;
    try {
      s = PAQUETE();
      jj_consume_token(0);
                           nuevo.insertar(s); {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        INICIO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo PAQUETE() throws ParseException {
 Nodo nuevo = new Nodo("PAQUETE"); Nodo p;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case validar:
        p = LOGIN();
                            nuevo.insertar(p);
        break;
      case corcheteA:
        jj_consume_token(corcheteA);
        p = ATRIBUTO();
        jj_consume_token(corcheteC);
                                                     nuevo.insertar(p);
        break;
      case crear:
      case retorno:
      case usar:
      case alterar:
      case eliminar:
      case insertar:
      case actualizar:
      case borrar:
      case seleccionar:
      case otorgar:
      case denegar:
      case declarar:
      case si:
      case selecciona:
      case para:
      case mientras:
      case detener:
      case imprimir:
      case contar:
      case backup:
      case restaurar:
      case id:
      case idVar:
        p = SENTENCIA();
                               nuevo.insertar(p);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        PAQUETE();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo LOGIN() throws ParseException {
 Nodo nuevo = new Nodo("LOGIN"); Nodo s;
    jj_consume_token(validar);
    jj_consume_token(dosPuntos);
    jj_consume_token(entero);
                                             {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ATRIBUTO() throws ParseException {
 Nodo nuevo = new Nodo("ATRIBUTO"); Nodo p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case paquete:
      jj_consume_token(paquete);
                          {if (true) return null;}
      break;
    case instruccion:
      jj_consume_token(instruccion);
      SENTENCIA();
                                         {if (true) return null;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SENTENCIA() throws ParseException {
 Nodo nuevo = new Nodo("SENTENCIA"); Nodo s, sp;
    try {
      s = INSTRUCCION();
      sp = SENTENCIAP();
                                                 nuevo.insertar(s); nuevo.insertar(sp);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        SENTENCIA();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SENTENCIAP() throws ParseException {
 Nodo nuevo = new Nodo("SENTENCIA"); Nodo s, sp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case crear:
      case retorno:
      case usar:
      case alterar:
      case eliminar:
      case insertar:
      case actualizar:
      case borrar:
      case seleccionar:
      case otorgar:
      case denegar:
      case declarar:
      case si:
      case selecciona:
      case para:
      case mientras:
      case detener:
      case imprimir:
      case contar:
      case backup:
      case restaurar:
      case id:
      case idVar:
        s = INSTRUCCION();
        sp = SENTENCIAP();
                                                 nuevo.insertar(s); nuevo.insertar(sp);
        break;
      default:
        jj_la1[2] = jj_gen;
                 {if (true) return null;}
                 {if (true) return nuevo;}
      }
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        SENTENCIAP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo INSTRUCCION() throws ParseException {
 Nodo nuevo = new Nodo("INSTRUCCION"); Nodo s,n; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case declarar:
        n = DECLARAR();
                             nuevo.insertar(n);
        break;
      case idVar:
        n = ASIGNACION();
                               nuevo.insertar(n);
        break;
      case si:
        n = SI();
                       nuevo.insertar(n);
        break;
      case selecciona:
        n = SELECCIONA();
                               nuevo.insertar(n);
        break;
      case para:
        n = PARA();
                         nuevo.insertar(n);
        break;
      case mientras:
        n = MIENTRAS();
                             nuevo.insertar(n);
        break;
      case imprimir:
        n = IMPRIMIR();
                             nuevo.insertar(n);
        break;
      case backup:
      case restaurar:
        n = FUNCION();
                            nuevo.insertar(n);
        break;
      case crear:
      case usar:
      case alterar:
      case eliminar:
        n = DDL();
                        nuevo.insertar(n);
        break;
      case insertar:
      case actualizar:
      case borrar:
      case seleccionar:
        n = DML();
                        nuevo.insertar(n);
        break;
      case otorgar:
      case denegar:
        n = DCL();
                        nuevo.insertar(n);
        break;
      case detener:
        i = jj_consume_token(detener);
        jj_consume_token(puntoComa);
                                       nuevo.insertar(new Nodo(i.image));
        break;
      case retorno:
        i = jj_consume_token(retorno);
        n = RETORNAR();
        jj_consume_token(puntoComa);
                                                    nuevo.insertar(new Nodo(i.image)); nuevo.insertar(n);
        break;
      case id:
        i = jj_consume_token(id);
        n = LLAMADA();
        jj_consume_token(puntoComa);
                                              nuevo.insertar(new Nodo(i.image)); nuevo.insertar(n);
        break;
      case contar:
        n = CONTAR();
        jj_consume_token(puntoComa);
                                      nuevo.insertar(n);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        INSTRUCCION();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo TIPO() throws ParseException {
 Nodo nuevo = new Nodo("TIPO"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case text:
        i = jj_consume_token(text);
                            nuevo.insertar(new Nodo(i.image));
        break;
      case bool:
        i = jj_consume_token(bool);
                            nuevo.insertar(new Nodo(i.image));
        break;
      case integer:
        i = jj_consume_token(integer);
                               nuevo.insertar(new Nodo(i.image));
        break;
      case doble:
        i = jj_consume_token(doble);
                             nuevo.insertar(new Nodo(i.image));
        break;
      case date:
        i = jj_consume_token(date);
                            nuevo.insertar(new Nodo(i.image));
        break;
      case dateTime:
        i = jj_consume_token(dateTime);
                                nuevo.insertar(new Nodo(i.image));
        break;
      case id:
        i = jj_consume_token(id);
                          nuevo.insertar(new Nodo(i.image));
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        TIPO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo COMPLEMENTO() throws ParseException {
 Nodo nuevo = new Nodo("COMPLEMENTO"); Nodo s; Token i,j;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nulo:
        i = jj_consume_token(nulo);
        s = COMPLEMENTOP();
                                             nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      case no:
        i = jj_consume_token(no);
        j = jj_consume_token(nulo);
        s = COMPLEMENTOP();
                                                      nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s);
        break;
      case autoincrementable:
        i = jj_consume_token(autoincrementable);
        s = COMPLEMENTOP();
                                                          nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      case llave_primaria:
        i = jj_consume_token(llave_primaria);
        s = COMPLEMENTOP();
                                                       nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      case llave_foranea:
        i = jj_consume_token(llave_foranea);
        j = jj_consume_token(id);
        s = COMPLEMENTOP();
                                                               nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[5] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        COMPLEMENTO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo COMPLEMENTOP() throws ParseException {
 Nodo nuevo = new Nodo("COMPLEMENTOP"); Nodo s; Token i,j;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nulo:
        i = jj_consume_token(nulo);
                            nuevo.insertar(new Nodo(i.image));
        break;
      case no:
        i = jj_consume_token(no);
        j = jj_consume_token(nulo);
                                   nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image));
        break;
      case autoincrementable:
        i = jj_consume_token(autoincrementable);
                                         nuevo.insertar(new Nodo(i.image));
        break;
      case llave_primaria:
        i = jj_consume_token(llave_primaria);
                                      nuevo.insertar(new Nodo(i.image));
        break;
      case llave_foranea:
        i = jj_consume_token(llave_foranea);
        j = jj_consume_token(id);
                                            nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image));
        break;
      default:
        jj_la1[6] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        COMPLEMENTOP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo DDL() throws ParseException {
 Nodo nuevo = new Nodo("DDL"); Nodo s; Token i,j;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case crear:
        i = jj_consume_token(crear);
        s = CREAR();
                                     nuevo.insertar(new Nodo(i.image));nuevo.insertar(s);
        break;
      case usar:
        i = jj_consume_token(usar);
        j = jj_consume_token(id);
        jj_consume_token(puntoComa);
                                           nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image));
        break;
      case alterar:
        i = jj_consume_token(alterar);
        s = ALTERAR();
        jj_consume_token(puntoComa);
                                                    nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      case eliminar:
        i = jj_consume_token(eliminar);
        s = ELIMINAR();
        jj_consume_token(puntoComa);
                                                      nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        DDL();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo CREAR() throws ParseException {
 Nodo nuevo = new Nodo("CREAR"); Nodo s,p,l; Token i,j;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case base_datos:
        i = jj_consume_token(base_datos);
        j = jj_consume_token(id);
        jj_consume_token(puntoComa);
                                                  nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image));
        break;
      case tabla:
        i = jj_consume_token(tabla);
        j = jj_consume_token(id);
        jj_consume_token(parentesisA);
        s = PARAMETROS();
        jj_consume_token(parentesisC);
        jj_consume_token(puntoComa);
                                                                                     nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image));  nuevo.insertar(s);
        break;
      case objeto:
        i = jj_consume_token(objeto);
        j = jj_consume_token(id);
        jj_consume_token(parentesisA);
        s = PARAMETROS();
        jj_consume_token(parentesisC);
        jj_consume_token(puntoComa);
                                                                                      nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s);
        break;
      case procedimiento:
        i = jj_consume_token(procedimiento);
        j = jj_consume_token(id);
        jj_consume_token(parentesisA);
        s = PARAMETROSVAR();
        jj_consume_token(parentesisC);
        jj_consume_token(llaveA);
        l = SENTENCIA();
        jj_consume_token(llaveC);
                                                                                                                   nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s); nuevo.insertar(l);
        break;
      case funcion:
        i = jj_consume_token(funcion);
        j = jj_consume_token(id);
        jj_consume_token(parentesisA);
        s = PARAMETROSVAR();
        jj_consume_token(parentesisC);
        p = TIPO();
        jj_consume_token(llaveA);
        l = SENTENCIA();
        jj_consume_token(llaveC);
                                                                                                                      nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s); nuevo.insertar(p); nuevo.insertar(l);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        CREAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo PARAMETROS() throws ParseException {
 Nodo nuevo = new Nodo("PARAMETROS"); Nodo s,c,p; Token i;
    try {
      s = TIPO();
      i = jj_consume_token(id);
      c = COMPLEMENTO();
      p = PARAMETROSP();
                                                                  nuevo.insertar(s); nuevo.insertar(new Nodo(i.image)); nuevo.insertar(c); nuevo.insertar(p);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        PARAMETROS();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo PARAMETROSP() throws ParseException {
 Nodo nuevo = new Nodo("PARAMETROSP"); Nodo s,c,p,q; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        s = TIPO();
        i = jj_consume_token(id);
        c = COMPLEMENTO();
        p = PARAMETROSP();
                                                                         nuevo.insertar(s); nuevo.insertar(new Nodo(i.image)); nuevo.insertar(c); nuevo.insertar(p);
        break;
      default:
        jj_la1[9] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        PARAMETROSP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo PARAMETROSVAR() throws ParseException {
 Nodo nuevo = new Nodo("PARAMETROSVAR"); Nodo s,p; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case text:
      case integer:
      case doble:
      case bool:
      case date:
      case dateTime:
      case id:
        s = TIPO();
        i = jj_consume_token(idVar);
        p = PARAMETROSVARP();
                                                        nuevo.insertar(s); nuevo.insertar(new Nodo(i.image)); nuevo.insertar(p);
        break;
      default:
        jj_la1[10] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        PARAMETROSVAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo PARAMETROSVARP() throws ParseException {
 Nodo nuevo = new Nodo("PARAMETROSVARP"); Nodo s,p; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        s = TIPO();
        i = jj_consume_token(idVar);
        p = PARAMETROSVARP();
                                                               nuevo.insertar(s); nuevo.insertar(new Nodo(i.image)); nuevo.insertar(p);
        break;
      default:
        jj_la1[11] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        PARAMETROSVARP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ALTERAR() throws ParseException {
 Nodo nuevo = new Nodo("ALTERAR"); Nodo s; Token i,j,k,c;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tabla:
        i = jj_consume_token(tabla);
        j = jj_consume_token(id);
        s = TIPOALTERAR();
                                                   nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s);
        break;
      case objeto:
        i = jj_consume_token(objeto);
        j = jj_consume_token(id);
        s = TIPOALTERAR();
                                                    nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s);
        break;
      case usuario:
        i = jj_consume_token(usuario);
        j = jj_consume_token(id);
        jj_consume_token(cambiar);
        k = jj_consume_token(password);
        jj_consume_token(igual);
        c = jj_consume_token(cadena);
                                                                             nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(new Nodo(k.image)); nuevo.insertar(new Nodo(c.image));
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        ALTERAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo TIPOALTERAR() throws ParseException {
 Nodo nuevo = new Nodo("TIPOALTERAR"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case agregar:
        i = jj_consume_token(agregar);
        jj_consume_token(parentesisA);
        s = PARAMETROS();
        jj_consume_token(parentesisC);
                                                                       nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      case quitar:
        i = jj_consume_token(quitar);
        s = LISTACAMPOS();
                                            nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        TIPOALTERAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ELIMINAR() throws ParseException {
 Nodo nuevo = new Nodo("ELIMINAR"); Nodo s; Token i,j;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tabla:
        i = jj_consume_token(tabla);
        j = jj_consume_token(id);
                                  nuevo.insertar(new Nodo(i.image));nuevo.insertar(new Nodo(i.image));
        break;
      case base_datos:
        i = jj_consume_token(base_datos);
        j = jj_consume_token(id);
                                      nuevo.insertar(new Nodo(i.image));nuevo.insertar(new Nodo(i.image));
        break;
      case objeto:
        i = jj_consume_token(objeto);
        j = jj_consume_token(id);
                                  nuevo.insertar(new Nodo(i.image));nuevo.insertar(new Nodo(i.image));
        break;
      case user:
        i = jj_consume_token(user);
        j = jj_consume_token(id);
                                nuevo.insertar(new Nodo(i.image));nuevo.insertar(new Nodo(i.image));
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        ELIMINAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo DML() throws ParseException {
 Nodo nuevo = new Nodo("DML"); Nodo s,p,d; Token i,j;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case insertar:
        i = jj_consume_token(insertar);
        jj_consume_token(en);
        jj_consume_token(tabla);
        j = jj_consume_token(id);
        jj_consume_token(parentesisA);
        s = LISTAVALORES();
        jj_consume_token(parentesisC);
        p = TIPOINSERTAR();
        jj_consume_token(puntoComa);
                                                                                                                       nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s); nuevo.insertar(p);
        break;
      case actualizar:
        i = jj_consume_token(actualizar);
        jj_consume_token(tabla);
        j = jj_consume_token(id);
        jj_consume_token(parentesisA);
        s = LISTACAMPOS();
        jj_consume_token(parentesisC);
        jj_consume_token(valores);
        jj_consume_token(parentesisA);
        p = LISTAVALORES();
        jj_consume_token(parentesisC);
        d = DONDE();
        jj_consume_token(puntoComa);
                                                                                                                                                                nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(s); nuevo.insertar(p); nuevo.insertar(d);
        break;
      case borrar:
        i = jj_consume_token(borrar);
        jj_consume_token(en);
        jj_consume_token(tabla);
        j = jj_consume_token(id);
        d = DONDE();
        jj_consume_token(puntoComa);
                                                                  nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(d);
        break;
      case seleccionar:
        i = jj_consume_token(seleccionar);
        s = SELECCIONAR();
        jj_consume_token(puntoComa);
                                                           nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        DML();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo TIPOINSERTAR() throws ParseException {
 Nodo nuevo = new Nodo("TIPOINSERTAR"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case valores:
        jj_consume_token(valores);
        jj_consume_token(parentesisA);
        s = LISTAVALORES();
        jj_consume_token(parentesisC);
                                                                     nuevo.insertar(s);
        break;
      default:
        jj_la1[16] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        TIPOINSERTAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo LISTACAMPOS() throws ParseException {
 Nodo nuevo = new Nodo("LISTACAMPOS"); Nodo s; Token i;
    try {
      i = jj_consume_token(id);
      s = LISTACAMPOSP();
                                        nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        LISTACAMPOS();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo LISTACAMPOSP() throws ParseException {
 Nodo nuevo = new Nodo("LISTACAMPOS"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        i = jj_consume_token(id);
        s = LISTACAMPOSP();
                                              nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[17] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        LISTAVALORESP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo LISTAVALORES() throws ParseException {
 Nodo nuevo = new Nodo("LISTAVALORES"); Nodo s,l; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case fecha:
      case fechaHora:
      case contar:
      case parentesisA:
      case entero:
      case decimal:
      case id:
      case idVar:
      case cadena:
      case ffecha:
        s = OPERACION();
        l = LISTAVALORESP();
                                                nuevo.insertar(s); nuevo.insertar(l);
        break;
      default:
        jj_la1[18] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        LISTAVALORES();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo LISTAVALORESP() throws ParseException {
 Nodo nuevo = new Nodo("LISTAVALORESP"); Nodo s,l; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        s = OPERACION();
        l = LISTAVALORESP();
                                                       nuevo.insertar(s); nuevo.insertar(l);
        break;
      default:
        jj_la1[19] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        LISTAVALORESP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo DONDE() throws ParseException {
 Nodo nuevo = new Nodo("DONDE"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case donde:
        i = jj_consume_token(donde);
        s = OPERACION();
                                        nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[20] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        DONDE();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SELECCIONAR() throws ParseException {
 Nodo nuevo = new Nodo("SELECCIONAR"); Nodo s,o,d,l; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case id:
        l = LISTACAMPOS();
        jj_consume_token(de);
        i = jj_consume_token(id);
        d = DONDE();
        o = ORDENAR();
                                                                 nuevo.insertar(l); nuevo.insertar(new Nodo(i.image)); nuevo.insertar(d); nuevo.insertar(o);
        break;
      case por:
        jj_consume_token(por);
        jj_consume_token(de);
        i = jj_consume_token(id);
        d = DONDE();
        o = ORDENAR();
                                                    nuevo.insertar(new Nodo(i.image)); nuevo.insertar(d); nuevo.insertar(o);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        SELECCIONAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ORDENAR() throws ParseException {
 Nodo nuevo = new Nodo("ORDENAR"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ordenar:
        jj_consume_token(ordenar);
        jj_consume_token(ppor);
        i = jj_consume_token(id);
        s = TIPOORDENAR();
                                                        nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[22] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        ORDENAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo TIPOORDENAR() throws ParseException {
 Nodo nuevo = new Nodo("TIPOORDENAR"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case asc:
        i = jj_consume_token(asc);
                         nuevo.insertar(new Nodo(i.image));
        break;
      case desc:
        i = jj_consume_token(desc);
                          nuevo.insertar(new Nodo(i.image));
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        TIPOORDENAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo DCL() throws ParseException {
 Nodo nuevo = new Nodo("DCL"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case otorgar:
        i = jj_consume_token(otorgar);
        jj_consume_token(permisos);
        s = LISTAVALORES();
        jj_consume_token(puntoComa);
                                                                  nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      case denegar:
        i = jj_consume_token(denegar);
        jj_consume_token(permisos);
        s = LISTAVALORES();
        jj_consume_token(puntoComa);
                                                                  nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        DCL();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo LISTAVARIABLES() throws ParseException {
 Nodo nuevo = new Nodo("LISTAVARIABLES"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        i = jj_consume_token(idVar);
        s = LISTAVARIABLES();
                                                    nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[25] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        LISTAVARIABLES();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo DECLARAR() throws ParseException {
 Nodo nuevo = new Nodo("DECLARAR"); Nodo l,s,d; Token i;
    try {
      jj_consume_token(declarar);
      i = jj_consume_token(idVar);
      l = LISTAVARIABLES();
      s = TIPO();
      d = DECLARARP();
      jj_consume_token(puntoComa);
                                                                                          nuevo.insertar(new Nodo(i.image)); nuevo.insertar(l); nuevo.insertar(s); nuevo.insertar(d);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        DECLARAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo DECLARARP() throws ParseException {
 Nodo nuevo = new Nodo("DECLARARP"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igual:
        jj_consume_token(igual);
        s = OPERACION();
                                      nuevo.insertar(s);
        break;
      default:
        jj_la1[26] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        DECLARARP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ASIGNACION() throws ParseException {
 Nodo nuevo = new Nodo("ASIGNACION"); Nodo s,p; Token i;
    try {
      i = jj_consume_token(idVar);
      s = VAR();
      jj_consume_token(igual);
      p = OPERACION();
      jj_consume_token(puntoComa);
                                                                  nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s); nuevo.insertar(p);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        ASIGNACION();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo VAR() throws ParseException {
 Nodo nuevo = new Nodo("VAR"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case punto:
        jj_consume_token(punto);
        i = jj_consume_token(id);
                               nuevo.insertar(new Nodo(i.image));
        break;
      default:
        jj_la1[27] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        VAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SI() throws ParseException {
 Nodo nuevo = new Nodo("SI"); Nodo s,m,o; Token i;
    try {
      i = jj_consume_token(si);
      jj_consume_token(parentesisA);
      s = OPERACION();
      jj_consume_token(parentesisC);
      jj_consume_token(llaveA);
      m = SENTENCIA();
      jj_consume_token(llaveC);
      o = SINO();
                                                                                                         nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s); nuevo.insertar(m); nuevo.insertar(o);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        SI();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SINO() throws ParseException {
 Nodo nuevo = new Nodo("SINO"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case sino:
        i = jj_consume_token(sino);
        jj_consume_token(llaveA);
        s = SENTENCIA();
        jj_consume_token(llaveC);
                                                       nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[28] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        SINO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SELECCIONA() throws ParseException {
 Nodo nuevo = new Nodo("SELECCIONA"); Nodo c,s; Token i;
    try {
      i = jj_consume_token(selecciona);
      jj_consume_token(parentesisA);
      s = OPERACION();
      jj_consume_token(parentesisC);
      jj_consume_token(llaveA);
      c = CASO();
      jj_consume_token(llaveC);
                                                                                                nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s); nuevo.insertar(c);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        SELECCIONA();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo CASO() throws ParseException {
 Nodo nuevo = new Nodo("CASO"); Nodo l,c,s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case caso:
        i = jj_consume_token(caso);
        s = TIPOCASO();
        jj_consume_token(dosPuntos);
        l = SENTENCIA();
        c = CASO();
                                                                        nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s); nuevo.insertar(l); nuevo.insertar(c);
        break;
      case defecto:
        i = jj_consume_token(defecto);
        jj_consume_token(dosPuntos);
        l = SENTENCIA();
                                                     nuevo.insertar(new Nodo(i.image)); nuevo.insertar(l);
        break;
      default:
        jj_la1[29] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        CASO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo TIPOCASO() throws ParseException {
 Nodo nuevo = new Nodo("TIPOCASO"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cadena:
        i = jj_consume_token(cadena);
                           nuevo.insertar(new Nodo(i.image));
        break;
      case entero:
        i = jj_consume_token(entero);
                           nuevo.insertar(new Nodo(i.image));
        break;
      case decimal:
        i = jj_consume_token(decimal);
                            nuevo.insertar(new Nodo(i.image));
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        TIPOCASO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo PARA() throws ParseException {
 Nodo nuevo = new Nodo("PARA"); Nodo s,l; Token i;
    try {
      i = jj_consume_token(para);
      jj_consume_token(parentesisA);
      s = PARAP();
      jj_consume_token(parentesisC);
      jj_consume_token(llaveA);
      l = SENTENCIA();
      jj_consume_token(llaveC);
                                                                                         nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s); nuevo.insertar(l);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        PARA();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo PARAP() throws ParseException {
 Nodo nuevo = new Nodo("PARAP"); Nodo s,p,q; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case declarar:
        s = DECLARAR();
        p = OPERACION();
        jj_consume_token(puntoComa);
        q = OPCIONPARA();
                                                                     nuevo.insertar(s); nuevo.insertar(p); nuevo.insertar(q);
        break;
      case idVar:
        s = ASIGNACION();
        p = OPERACION();
        jj_consume_token(puntoComa);
        q = OPCIONPARA();
                                                                   nuevo.insertar(s); nuevo.insertar(p); nuevo.insertar(q);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        PARAP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo OPCIONPARA() throws ParseException {
 Nodo nuevo = new Nodo("OPCIONPARA"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
        i = jj_consume_token(mas);
        jj_consume_token(mas);
                             nuevo.insertar(new Nodo(i.image));
        break;
      case menos:
        i = jj_consume_token(menos);
        jj_consume_token(menos);
                             nuevo.insertar(new Nodo(i.image));
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        OPCIONPARA();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo MIENTRAS() throws ParseException {
 Nodo nuevo = new Nodo("MIENTRAS"); Nodo s,l; Token i;
    try {
      i = jj_consume_token(mientras);
      jj_consume_token(parentesisA);
      s = OPERACION();
      jj_consume_token(parentesisC);
      jj_consume_token(llaveA);
      l = SENTENCIA();
      jj_consume_token(llaveC);
                                                                                                   nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s); nuevo.insertar(l);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        MIENTRAS();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo IMPRIMIR() throws ParseException {
 Nodo nuevo = new Nodo("IMPRIMIR"); Nodo s; Token i;
    try {
      i = jj_consume_token(imprimir);
      s = OPERACION();
      jj_consume_token(puntoComa);
                                                      nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        IMPRIMIR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo CONTAR() throws ParseException {
 Nodo nuevo = new Nodo("CONTAR"); Nodo s; Token i;
    try {
      i = jj_consume_token(contar);
      jj_consume_token(parentesisA);
      jj_consume_token(menormenor);
      jj_consume_token(seleccionar);
      s = SELECCIONAR();
      jj_consume_token(mayormayor);
      jj_consume_token(parentesisC);
                                                                                                          nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        CONTAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo FUNCION() throws ParseException {
 Nodo nuevo = new Nodo("FUNCION"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case backup:
        i = jj_consume_token(backup);
        s = BACKUP();
        jj_consume_token(puntoComa);
                                                 nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      case restaurar:
        i = jj_consume_token(restaurar);
        s = RESTAURAR();
        jj_consume_token(puntoComa);
                                                       nuevo.insertar(new Nodo(i.image)); nuevo.insertar(s);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        FUNCION();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo BACKUP() throws ParseException {
 Nodo nuevo = new Nodo("BACKUP"); Nodo s; Token i,j,k;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case usqldump:
        i = jj_consume_token(usqldump);
        j = jj_consume_token(id);
        k = jj_consume_token(id);
                                           nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(new Nodo(k.image));
        break;
      case completo:
        i = jj_consume_token(completo);
        j = jj_consume_token(id);
        k = jj_consume_token(id);
                                           nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image)); nuevo.insertar(new Nodo(k.image));
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        BACKUP();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo RESTAURAR() throws ParseException {
 Nodo nuevo = new Nodo("RESTAURAR"); Nodo s; Token i,j;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case usqldump:
        i = jj_consume_token(usqldump);
        j = jj_consume_token(cadena);
                                        nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image));
        break;
      case completo:
        i = jj_consume_token(completo);
        j = jj_consume_token(cadena);
                                        nuevo.insertar(new Nodo(i.image)); nuevo.insertar(new Nodo(j.image));
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        RESTAURAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo RETORNAR() throws ParseException {
 Nodo nuevo = new Nodo("RETORNAR"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case fecha:
      case fechaHora:
      case contar:
      case parentesisA:
      case entero:
      case decimal:
      case id:
      case idVar:
      case cadena:
      case ffecha:
        s = OPERACION();
                              nuevo.insertar(s);
        break;
      default:
        jj_la1[36] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        RETORNAR();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo LLAMADA() throws ParseException {
 Nodo nuevo = new Nodo("LLAMADA"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case parentesisA:
        jj_consume_token(parentesisA);
        s = LISTAVALORES();
        jj_consume_token(parentesisC);
                                                            nuevo.insertar(s);
        break;
      case punto:
        jj_consume_token(punto);
        s = OBJETO();
                                   nuevo.insertar(s);
        break;
      default:
        jj_la1[37] = jj_gen;
                 {if (true) return null;}
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        LLAMADA();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo OBJETO() throws ParseException {
 Nodo nuevo = new Nodo("OBJETO"); Nodo s; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case id:
        i = jj_consume_token(id);
                       nuevo.insertar(new Nodo(i.image));
        break;
      case por:
        i = jj_consume_token(por);
                    nuevo.insertar(new Nodo(i.image));
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return nuevo;}
    } catch (ParseException e) {
        Token t;
    t = getNextToken();
        if(t.kind==puntoComa || t.kind==llaveC){
                {if (true) return nuevo;}
        }
        OBJETO();
        {{if (true) return nuevo;}}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Nodo OPERACION() throws ParseException {
 Nodo nuevo = new Nodo("OPERACION"); Nodo s; Token i;
    s = AND();
                        nuevo.insertar(s);
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo AND() throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo s,r; Token i;
    s = OR();
    r = ANDP(s);
                                  nuevo.insertar(r);
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ANDP(Nodo h) throws ParseException {
 Nodo nuevo= new Nodo("E"); Nodo n = new Nodo("E"); Nodo s,r; Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      i = jj_consume_token(and);
      s = OR();
                                n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = ANDP(n);
                                                                                                         nuevo.insertar(r);
      break;
    default:
      jj_la1[39] = jj_gen;
                 {if (true) return null;}
    }
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo OR() throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo s,r; Token i;
    s = REL();
    r = ORP(s);
                                  nuevo.insertar(r);
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo ORP(Nodo h) throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo n = new Nodo("E");  Nodo s,r; Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case or:
      i = jj_consume_token(or);
      s = REL();
                                 n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = ORP(n);
                                                                                                         nuevo.insertar(r);
      break;
    default:
      jj_la1[40] = jj_gen;
                 {if (true) return null;}
    }
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo REL() throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo s,r; Token i;
    s = SUM();
    r = RELP(s);
                                   nuevo.insertar(r);
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo RELP(Nodo h) throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo n = new Nodo("E");  Nodo s,r; Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case igualIgual:
      i = jj_consume_token(igualIgual);
      s = SUM();
                                         n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = RELP(n);
                                                                                                                  nuevo.insertar(r);
      break;
    case diferente:
      i = jj_consume_token(diferente);
      s = SUM();
                                        n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = RELP(n);
                                                                                                                 nuevo.insertar(r);
      break;
    case mayorIgual:
      i = jj_consume_token(mayorIgual);
      s = SUM();
                                         n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = RELP(n);
                                                                                                                  nuevo.insertar(r);
      break;
    case menorIgual:
      i = jj_consume_token(menorIgual);
      s = SUM();
                                         n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = RELP(n);
                                                                                                                  nuevo.insertar(r);
      break;
    case mayor:
      i = jj_consume_token(mayor);
      s = SUM();
                                    n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = RELP(n);
                                                                                                             nuevo.insertar(r);
      break;
    case menor:
      i = jj_consume_token(menor);
      s = SUM();
                                    n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = RELP(n);
                                                                                                             nuevo.insertar(r);
      break;
    default:
      jj_la1[41] = jj_gen;
                 {if (true) return null;}
    }
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SUM() throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo s,r; Token i;
    s = MULT();
    r = SUMP(s);
                                     nuevo.insertar(r);
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo SUMP(Nodo h) throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo n = new Nodo("E");  Nodo s,r;  Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mas:
      i = jj_consume_token(mas);
      s = MULT();
                                   n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = SUMP(n);
                                                                                                            nuevo.insertar(r);
      break;
    case menos:
      i = jj_consume_token(menos);
      s = MULT();
                                     n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = SUMP(n);
                                                                                                              nuevo.insertar(r);
      break;
    default:
      jj_la1[42] = jj_gen;
                 {if (true) return null;}
    }
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo MULT() throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo s,r; Token i;
    s = F();
    r = MULTP(s);
                                   nuevo.insertar(r);
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo MULTP(Nodo h) throws ParseException {
 Nodo nuevo = new Nodo("E");Nodo n = new Nodo("E");  Nodo s,r;  Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case por:
      i = jj_consume_token(por);
      s = F();
                                n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = MULTP(n);
                                                                                                          nuevo.insertar(r);
      break;
    case div:
      i = jj_consume_token(div);
      s = F();
                                n.insertar(h); n.insertar(new Nodo(i.image)); n.insertar(s);
      r = MULTP(n);
                                                                                                          nuevo.insertar(r);
      break;
    default:
      jj_la1[43] = jj_gen;
                 {if (true) return null;}
    }
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static final public Nodo F() throws ParseException {
 Nodo nuevo = new Nodo("E"); Nodo s; Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entero:
      i = jj_consume_token(entero);
                            nuevo.insertar(new Nodo(i.image, "entero"));
      break;
    case idVar:
      i = jj_consume_token(idVar);
                           nuevo.insertar(new Nodo(i.image, "var"));
      break;
    case cadena:
      i = jj_consume_token(cadena);
                            nuevo.insertar(new Nodo(i.image, "cadena"));
      break;
    case decimal:
      i = jj_consume_token(decimal);
                             nuevo.insertar(new Nodo(i.image, "decimal"));
      break;
    case ffecha:
      i = jj_consume_token(ffecha);
                            nuevo.insertar(new Nodo(i.image, "fecha"));
      break;
    case parentesisA:
      jj_consume_token(parentesisA);
      s = AND();
      jj_consume_token(parentesisC);
                                                    nuevo.insertar(s);
      break;
    case id:
      i = jj_consume_token(id);
      s = LLAMADA();
                                    nuevo.insertar(new Nodo(i.image, "entero")); nuevo.insertar(s);
      break;
    case fecha:
      i = jj_consume_token(fecha);
      jj_consume_token(parentesisA);
      jj_consume_token(parentesisC);
                                                     nuevo.insertar(new Nodo(i.image));
      break;
    case fechaHora:
      i = jj_consume_token(fechaHora);
      jj_consume_token(parentesisA);
      jj_consume_token(parentesisC);
                                                         nuevo.insertar(new Nodo(i.image));
      break;
    case contar:
      s = CONTAR();
                            nuevo.insertar(s);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                 {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public parserSQLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffe82002,0x60,0xffe82000,0xffe82000,0x1f80,0x0,0x0,0xe02000,0x7c000,0x0,0x1f80,0x0,0x118000,0x0,0x1c000,0xf000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xcf2,0x0,0xcf2,0xcf2,0x0,0x7c000,0x7c000,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x400000,0x0,0x4000000,0x0,0x700,0x0,0x8000000,0x0,0x10000000,0xc0000000,0x0,0x0,0x0,0x0,0x1,0xc,0x0,0x0,0x0,0x800,0x3000,0x3000,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x84,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x8000000,0xc0000008,0x8000000,0x0,0x2000,0x0,0x0,0x0,0x8000000,0x10000000,0x20000000,0x0,0x0,0xc0000000,0x0,0x1800,0x4,0x0,0x0,0xc0000008,0x20000008,0x2000,0x2000000,0x1000000,0xf30000,0x1800,0x6000,0xc0000008,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x3,0x0,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1b,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x2,0x0,0x0,0x0,0x0,0x1b,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1b,};
   }

  /** Constructor with InputStream. */
  public parserSQL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parserSQL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parserSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parserSQL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parserSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parserSQL(parserSQLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parserSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[110];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 110; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

/*
	public static Nodo main(String[] args)throws ParseException
	{
		try
		{
			parserSQL analizador = new parserSQL(System.in);
			analizador.INICIO();
			System.out.println("Se ha compilado con exito");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Se han encontrado errores");
		}
	}
	*/
//Se comenta esto
}
